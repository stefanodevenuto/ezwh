@startuml LowLevelDesign
package api {

    Class AppDAO {

    }

    package user {
        Class UserRoutes {
            - ErrorHandler errorHandler
            - UserController controller

            + UserRoutes()

            + getAllUsers()
            + getAllSuppliers()
            + getUserInfo(email)

            + newUSer(username, name, surname, password, type)
            + managerSessions(username, password)
            + customerSessions(username, password)
            + supplierSessions(username, password)
            + clerkSessions(username, password)
            + qualityEmployeeSessions(username, password)
            + deliveryEmployeeSessions(username, password)

            + modifyRight(username, oldType, newType)
            + deleteUser(username, type)
        }

        Class UserController {
            + UserDAO dao

            + UserController()

            + getAllUsers()
            + getAllSuppliers()
            + getUserInfo(email)

            + createUser(username, name, surname, password, type)
            + loginManager(username, password)
            + loginCustomer(username, password)
            + loginSupplier(username, password)
            + loginClerk(username, password)
            + loginQualityEmployee(username, password)
            + loginDeliveryEmployee(username, password)
            + modifyRight(username, oldType, newType)
            + deleteUser(username, type)

            - login(username, password, type)
        }

        Class UserDAO extends AppDAO {
            + UserDAO()

            + getAllUsers() 
            + getAllUsersByType(type) 
            + getUserByID(id)

            + createUser(username, name, surname, password, type) 
            + checkUser(email, password) 
            + modifyRight(username, oldType, newType) 
            + deleteUser(userUsername, userType) 

            - getUserByEmailAndType(email, type)
            - deleteAllUser()
        }

        Class UserErrorFactory {
            + {static} newCustomerNotFound
            + {static} newUserNotFound
            + {static} newWrongCredential
            + {static} newTypeNotFound
            + {static} newUserConflict
            + {static} newAttemptCreationPrivilegedAccount
        }

        Class User {
            - {static} ADMINISTRATOR     = "administrator";
            - {static} MANAGER           = "manager";
            - {static} INTERNAL_CUSTOMER = "INTERNAL_CUSTOMER";
            - {static} CUSTOMER          = "customer";
            - {static} SUPPLIER          = "supplier";
            - {static} CLERK             = "clerk";
            - {static} QUALITY_EMPLOYEE  = "qualityEmployee";
            - {static} DELIVERY_EMPLOYEE = "deliveryEmployee";

            - id
            - name
            - surname
            - email
            - password
            - type

            + User(id, name, surname, email, password, type)

            - {static} isValidType(type)
            - {static} mockUser()
            - {static} mockUserCustomer()

        }

        UserRoutes -> UserController
        UserController -> UserDAO
        UserController -> UserErrorFactory
    }


package sku {
        Class SkuRoutes {
            - ErrorHandler errorHandler
            - SkuController controller

            + SkuRoutes()

            + getAllSkus()
            + getSkuByID(skuId)

            + createSku(description, weight, volume, notes, price, availableQuantity)
            + modifySku(skuId, newDescription, newWeight, newVolume, newNotes, newPrice, newAvailableQuantity)
            + addModifySkuPosition(skuId, newPosition)

            + deleteSku(skuId)

        }

        Class SkuController {
            + SkuDAO dao

            + SkuController()

            + SKURoutes()

            + getAllSkus()
            + getSkuByID(skuId)

            + createSku(description, weight, volume, notes, price, availableQuantity)
            + modifySku(skuId, newDescription, newWeight, newVolume, newNotes, newPrice, newAvailableQuantity)
            + addModifySkuPosition(skuId, newPosition)
            
            + deleteSku(skuId)
            + getSkuByIDInternal(skuId) 
        }

        Class SkuDAO extends AppDAO {
            + SkuDAO()

            + getAllSkus()
            + getSkuByID(skuId)

            + createSku(description, weight, volume, notes, price, availableQuantity)
            + modifySku(skuId, newDescription, newWeight, newVolume, newNotes, newPrice, newAvailableQuantity)
            + addModifySkuPosition(skuId, newPosition)
            
            + deleteSku(skuId)
            + getSkuByIDInternal(skuId) 
        }

        Class SkuErrorFactory {
            + {static} newSkuNotFound
            + {static} newPositionNotCapable
            + {static} newPositionAlreadyOccupied
            + {static} newSkuWithAssociatedSkuItems
        }

        Class Sku {

            - id
            - description
            - weight
            - volume
            - notes
            - positionId
            - availableQuantity
            - price    
            - testDescriptors

            + Sku(id, description, weight, volume, notes, positionId, availableQuantity, price, testDescriptors)

            - {static} intoJson(all)
            - {static} mockTestSku()
        }

        SkuRoutes -> SkuController
        SkuController -> SkuDAO
        SkuController -> SkuErrorFactory
    }
    

package skuItem {
        Class SKUItemRoutes {
            - ErrorHandler errorHandler
            - SKUItemController controller

            + SKUItemRoutes()

            + getAllSKUItems()
            + getSKUItemBySKUID(skuId)
            + getSKUItemByRFID(SKUItemId)

            + createSKUItem(RFID, SKUId, DateOfStock)
            + modifySKUItem(SKUItemId, newRFID, newAvailable, newDateOfStock)
            + deleteSKUItem(SKUItemId)

        }

        Class SkuItemController {
            + SKUItemDAO dao

            + skuController()

            + getAllSKUItems()
            + getSKUItemBySKUID(skuId)
            + getSKUItemByRFID(SKUItemId)

            + createSKUItem(RFID, SKUId, DateOfStock)
            + modifySKUItem(SKUItemId, newRFID, newAvailable, newDateOfStock)
            + deleteSKUItem(SKUItemId)

            + getSKUItemByRFIDInternal(rfid) 
            + getAllSkuItemsByRestockOrder(restockOrderId)
            + getItemByRFIDInternal(RFID, restockOrderId)
        }

        Class SKUItemDAO extends AppDAO {
            + SKUItemDAO()

            + getAllSKUItems()
            + getSKUItemBySKUID(skuId)
            + getSKUItemByRFID(SKUItemId)

            + createSKUItem(RFID, SKUId, DateOfStock)
            + modifySKUItem(SKUItemId, newRFID, newAvailable, newDateOfStock)
            + deleteSKUItem(SKUItemId)
            + deleteAllSKUItem()

            + getAllSkuItemsByRestockOrder(restockOrderId) 
            + getSupplierIdByRestockOrderId(restockOrderId)
            + getSkuAndSKUItemByRFIDInternal(rfid, supplierId)
        }

        Class SkuItemErrorFactory {
            + {static} newSKUItemNotFound
            + {static} newSKUItemRFIDNotUnique
            + {static} newSKUItemRelatedToItemNotOwned
        }

        Class SkuItem {

            - RFID
            - SKUId
            - available
            - dateOfStock
            - restockOrderId
            - returnOrderId
            - internalOrderId

            + Sku(id , description, weight, volume, notes, positionId, availableQuantity, price, testDescriptors)

            - {static} intoJson(all)
            - {static} mockTestSkuItem()
        }

        SKUItemRoutes -> SkuItemController
        SkuItemController -> SKUItemDAO
        SkuItemController -> SkuItemErrorFactory
    }


package position {
        Class PositionRoutes {
            - ErrorHandler errorHandler
            - PositionController controller

            + PositionRoutes()

            + getAllPositions()
            + getPositionByID(id)

            + createPosition(positionID, aisleID, row, col, maxWeight, maxVolume)
            + modifyPosition(positionID, newAisleID, newRow, newCol, newMaxWeight, newMaxVolume,
        newOccupiedWeight, newOccupiedVolume)
            + modifyPositionID(oldPositionId, newPositionId)
            + deletePosition(positionID)

        }

        Class PositionController {
            + PositionDAO dao

            
            + getAllPositions()
            + getPositionByID(id)

            + createPosition(positionID, aisleID, row, col, maxWeight, maxVolume)
            + modifyPosition(positionID, newAisleID, newRow, newCol, newMaxWeight, newMaxVolume,
        newOccupiedWeight, newOccupiedVolume)
            + modifyPositionID(oldPositionId, newPositionId)
            + deletePosition(positionID)
        }

        Class PositionDAO extends AppDAO {
            + PositionDAO()

            + getAllPositions()
            + getPositionByID(id)

            + createPosition(positionID, aisleID, row, col, maxWeight, maxVolume)
            + modifyPosition(positionID, newAisleID, newRow, newCol, newMaxWeight, newMaxVolume,
        newOccupiedWeight, newOccupiedVolume)
            + modifyPositionID(oldPositionId, newPositionId)
            + deletePosition(positionID)
            + deleteAllPosition()
        }

        Class PositionErrorFactory {
            + {static} newPositionNotFound
            + {static} newPositionIdNotSymmetric
            + {static} newPositionIDNotUnique
            + {static} newGreaterThanMaxWeightPosition
            + {static} newGreaterThanMaxVolumePosition
        }

        Class Position {

            - positionID
            - aisleID
            - row
            - col
            - maxWeight
            - maxVolume
            - occupiedWeight
            - occupiedVolume

            + Position(positionID, aisleID, row, col, maxWeight, maxVolume, occupiedWeight, occupiedVolume)

            - {static} mockTestPosition()
        }

        PositionRoutes -> PositionController
        PositionController -> PositionDAO
        PositionController -> PositionErrorFactory
    }

    package testDescriptor {
        Class TestDescriptorRoutes {
            - ErrorHandler errorHandler
            - TestDescriptorController controller

            + TestDescriptorRoutes()

            + getAllTestDescriptors()
            + getTestDescriptorByID(testDescriptorId)

            + createTestDescriptor(name, procedureDescription, idSKU)
            + modifyTestDescriptor(testDescriptorId, newName, newProcedureDescription, newIdSKU)
            + deleteTestDescriptor(testDescriptorId)

        }

        Class TestDescriptorController {
            + TestDescriptorDAO dao

            
           
            + getAllTestDescriptors()
            + getTestDescriptorByID(testDescriptorId)

            + createTestDescriptor(name, procedureDescription, idSKU)
            + modifyTestDescriptor(testDescriptorId, newName, newProcedureDescription, newIdSKU)
            + deleteTestDescriptor(testDescriptorId)
        }

        Class TestDescriptorDAO extends AppDAO {
            + TestDescriptorDAO()

            + getAllTestDescriptors()
            + getTestDescriptorByID(testDescriptorId)

            + createTestDescriptor(name, procedureDescription, idSKU)
            + modifyTestDescriptor(testDescriptorId, newName, newProcedureDescription, newIdSKU)
            + deleteTestDescriptor(testDescriptorId)
            + deleteAllTestDescriptor()
        }

        Class TestDescriptorErrorFactory {
            + {static} newTestDescriptorNotFound
            + {static} newSKUAlreadyWithTestDescriptor
            + {static} newTestDescriptorWithAssociatedTestResults
        }

        Class TestDescriptor {

            - id
            - name
            - procedureDescription
            - idSKU

            + TestDescriptor(id, name, procedureDescription, idSKU)

            - {static} mockTestTestDescriptor()
        }

        TestDescriptorRoutes -> TestDescriptorController
        TestDescriptorController -> TestDescriptorDAO
        TestDescriptorController -> TestDescriptorErrorFactory
    }

    package testResult {
        Class TestResultRoutes {
            - ErrorHandler errorHandler
            - TestResultController controller

            + TestResultRoutes()

            + getAllTestResults(rfid)
            + getTestResultByID(rfid, testResultId)

            + createTestResult(rfid, idTestDescriptor, Date, Result)
            + modifyTestResult(rfid, id, newIdTestDescriptor, newDate, newResult)
            + deleteTestResult(rfid, id)

        }

        Class TestResultController {
            + TestResultDAO dao

            + skuItemController
           
            + getAllTestResults(rfid)
            + getTestResultByID(rfid, testResultId)

            + createTestResult(rfid, idTestDescriptor, Date, Result)
            + modifyTestResult(rfid, id, newIdTestDescriptor, newDate, newResult)
            + deleteTestResult(rfid, id)

            + hasFailedTestResultsByRFID(RFID)
        }

        Class TestResultDAO extends AppDAO {
            + TestResultDAO()

           + getAllTestResults(rfid)
            + getTestResultByID(rfid, testResultId)

            + createTestResult(rfid, idTestDescriptor, Date, Result)
            + modifyTestResult(rfid, id, newIdTestDescriptor, newDate, newResult)
            + deleteTestResult(rfid, id)

            + hasFailedTestResultsByRFID(RFID)
        }

        Class TestResultErrorFactory {
            + {static} newTestResultNotFound
            + {static} newTestDescriptorOrSkuItemNotFound
        }

        Class TestResult {

            - id;
            - date
            - result
            - testDescriptorId
            - RFID

            + TestResult(id, date, result, testDescriptorId, RFID)

            - intoJson()
            - {static} mockTestTestResult()
        }

        TestResultRoutes -> TestResultController
        TestResultController -> TestResultDAO
        TestResultController -> TestResultErrorFactory
    }

    package restock_order {
        Class RestockOrderDAO extends AppDAO {
            + getAllRestockOrders()
            + getAllIssuedRestockOrders()
            + getRestockOrderByID(restockOrderId)
            + createRestockOrder(issueDate, supplierId, state, products)
            + modifyState(restockOrderId, newState)
            + modifyRestockOrderSkuItems(restockOrderId, skuItems)
            + modifyTransportNote(restockOrderId, deliveryDate)
            + deleteRestockOrder(restockOrderId)
            + deleteAllRestockOrder()
        }

        Class RestockOrderController {
            - RestockOrderDAO dao
            - TestResultController testResultController
            - SkuItemController skuItemController
            - ItemController itemController

            + RestockOrderController(testResultController, skuItemController, itemController)

            + getAllRestockOrders()
            + getAllIssuedRestockOrders()
            + getRestockOrderByID(restockOrderId)
            + getRestockOrderReturnItemsByID(restockOrderId)
            + createRestockOrder(issueDate, products, supplierId)
            + modifyState(restockOrderId, newState)
            + modifyRestockOrderSkuItems(restockOrderId, skuItems)
            + modifyTransportNote(restockOrderId, deliveryDate)
            + deleteRestockOrder(restockOrderId)

            - buildRestockOrders(rows)
            - getRestockOrderByIDInternal(restockOrderId)
        }

        Class RestockOrderRoutes {
            - ErrorHandler errorHandler
            - RestockOrderController controller

            + RestockOrderRoutes(testResultController, skuItemController, itemController)

            + initRoutes()
        }

        Class RestockOrder {
            {static} ISSUED = "ISSUED"
            {static} DELIVERY = "DELIVERY"
            {static} DELIVERED = "DELIVERED"
            {static} TESTED = "TESTED"
            {static} COMPLETEDRETURN = "COMPLETEDRETURN"
            {static} COMPLETED = "COMPLETED"

            + id
            + issueDate
            + state
            + deliveryDate
            + supplierId
            + products
            + skuItems

            + RestockOrder(id, issueDate, state, deliveryDate, supplierId, products, skuItems = [])

            + intoJson()
            + {static} isVaidState()
            + {static} mockRestockOrder()
        }

        Class Product {
            + Item item
            + qty

            + Product(item, qty)
        }

        Class RestockOrderErrorFactory {
            + {static} newRestockOrderNotFound()
            + {static} newRestockOrderNotReturned()
            + {static} newRestockOrderNotDelivered()
            + {static} newRestockOrderNotDelivery()
            + {static} newRestockOrderDeliveryBeforeIssue()
        }

        RestockOrder - "*" Product
        RestockOrderController -up-> RestockOrderDAO
        RestockOrderRoutes -> RestockOrderController
        RestockOrderController .> RestockOrder : <<import>>
        RestockOrderController .> RestockOrderErrorFactory : <<import>>
    }

    package return_order {
        Class ReturnOrderDAO extends AppDAO {
            + getAllReturnOrders()
            + getReturnOrderByID(returnOrderID)
            + createReturnOrder(returnDate, restockOrderId, products)
            + deleteReturnOrder(returnOrderID)
        }

        Class ReturnOrderController {
            + ReturnOrderDAO dao
            + SkuItemController skuItemController

            + ReturnOrderController(skuItemController)

            + getAllReturnOrders()
            + getReturnOrderByID(returnOrderID)
            + createReturnOrder(returnDate, products, restockOrderId)
            + deleteReturnOrder(returnOrderID)
            
            - buildReturnOrders(rows)
        }

        Class ReturnOrderRoutes {
            - ErrorHandler errorHandler
            - ReturnOrderController controller

            + ReturnOrderRoutes(testResultController, skuItemController, itemController)

            + initRoutes()
        }

        Class ReturnOrderErrorFactory {
            + {static} newReturnOrderNotFound()
        }

        Class ReturnOrder {
            + id
            + returnDate
            + products
            + restockOrderId

            + ReturnOrder(id = null, returnDate, products, restockOrderId)
        }

        Class Products {
            + SKUId
            + description
            + price
            + RFID
            
            + Products(SKUId, description, price, RFID)
        }

        ReturnOrder - "*" Products
        ReturnOrderController -up-> ReturnOrderDAO
        ReturnOrderRoutes -> ReturnOrderController
        ReturnOrderController .> ReturnOrder : <<import>>
        ReturnOrderController .> ReturnOrderErrorFactory : <<import>>
    }

    package internal_order {
        Class InternalOrderDAO extends AppDAO {
            + getAllInternalOrders()
            + getInternalOrderByID(internalOrderID)
            + getInternalOrdersAccepted()
            + getInternalOrdersIssued()
            + createInternalOrder(issueDate, customerId, state, products)
            + modifyStateInternalOrder(internalOrderId, newState, products = undefined)
            + deleteInternalOrder(internalOrderID)
            + deleteAllInternalOrder()
        }

        Class InternalOrderController {
            + InternalOrderDAO dao
            + SkuController skuController

            + getAllInternalOrders() {
            + getInternalOrdersAccepted() {
            + getInternalOrdersIssued() {
            + getInternalOrderByID(internalOrderID) {
            + createInternalOrder(issueDate, products, customerId) {
            + modifyStateInternalOrder(internalOrderId, newState, products) {
            + deleteInternalOrder(internalOrderID) {
            
            - buildInternalOrders(rows) {
            - getInternalOrderByIDInternal(internalOrderId) {
        }

        Class InternalOrderRoutes {
            - ErrorHandler errorHandler
            - InternalOrderController controller

            + InternalOrderRoutes(suController)

            + initRoutes()
        }

        Class InternalOrder {
            + {static} ISSUED = "ISSUED"
            + {static} ACCEPTED = "ACCEPTED"
            + {static} REFUSED = "REFUSED"
            + {static} CANCELED = "CANCELED"
            + {static} COMPLETED = "COMPLETED"

            + id
            + issueDate
            + state
            + products
            + customerId

            + InternalOrder(id = null, issueDate, state, products, customerId)

            + {static} isValidState(state)
            + {static} mockTestInternalOrder() 
            + {static} mockTestInternalOrder2()
        }

        Class Products {
            + SKUId
            + description
            + price
            + RFID

            + Products(SKUId, description, price, RFID)
        }

        Class ProductsQ {
            + SKUId
            + description
            + price
            + RFID

            + Products(SKUId, description, price, RFID)
        }

        InternalOrder - "*" Products
        InternalOrder - "*" ProductsQ
        InternalOrderController -up-> InternalOrderDAO
        InternalOrderRoutes -> InternalOrderController
        InternalOrderController .> InternalOrder : <<import>>
        InternalOrderController .> InternalOrderErrorFactory : <<import>>
    }

    package item {
        Class ItemDAO extends AppDAO {
            + getAllItems()
            + getItemByID(itemId)
            + createItem(id, description, price, SKUId, supplierId)
            + modifyItem(id, description, price)
            + deleteItem(id)
            + getItemBySkuIdAndSupplierId(skuId, supplierId)
            + deleteAllItem()
        }

        Class ItemController {
            + ItemDAO dao

            + ItemController()

            + getAllItems()
            + getItemByID(itemId)
            + createItem(id, description, price, SKUId, supplierId)
            + modifyItem(id, description, price)
            + deleteItem(id)

            - getItemBySkuIdAndSupplierId(skuId, supplierId)
            - getItemByIDInternal(itemId)
        }

        Class ItemRoutes {
            - ErrorHandler errorHandler
            - ItemController controller

            + ItemRoutes()

            + initRoutes()
        }

        Class Item {
            + id
            + description
            + price
            + SKUId
            + supplierId

            + Item(id = null, description, price, SKUId, supplierId)

            + {static} mockItem()
        }

        Class ItemErrorFactory {
            + {static} itemNotFound()
            + {static} skuAlreadyAssociatedForSupplier()
            + {static} itemAlreadySoldBySupplier()
            + {static} newSkuOrSupplierNotFound()
        }

        ItemController -up-> ItemDAO
        ItemRoutes -> ItemController
        ItemController .> Item : <<import>>
        ItemController .> ItemErrorFactory : <<import>>
    }

    ' SKU Management
    Class SkuController {
        - SkuDAO dao

        + List<Sku> getAllSkus()
        + Sku getSkuByID(int skuId)

        + Sku createSku(String ID, String description, int weight, int volume, String notes, float price, int availableQuantity)
        + void modifySku(int skuId, String newDescription, int newWeight, int newVolume, Sting newNotes, float newPrice, int newAvailableQuantity)
        + void addModifySkuPosition(int skuId, String positionID)
        + void deleteSKU(int skuId)

        - Sku getSkuByIDInternal(int skuId)
    }

    ' Persistence Management
    Class DBHandler {
        + List<SKU> getAllSKUs()
        + SKU getSKUByID(String SKUID)
        + void saveSKU(SKU sku)
        + void deleteSKU(String SKUID)

        + List<User> getAllUsers()
        + User login(String username, String password)
        + User createUser(User user)
        + void modifyUserRights(String username, String oldType, String newType)

        + List<RestockOrder> getAllRestockOrders()
        + RestockOrder getRestockOrderByID(String ID)
        + void saveRestockOrder(RestockOrder restockOrder)
        + void deleteRestockOrder(String ID)

        + List<InternalOrder> getAllInternalOrders()
        + InternalOrder getInternalOrderByID(String ID)
        + void saveInternalOrder(InternalOrder internalOrder)
        + void deleteInternalOrder(String ID)

        + List<Position> getAllPositions()
        + Position getPositionByID(String ID)
        + void savePosition(Position position)
        + void deletePosition(String ID)

        + List<Position> getAllReturnOrders()
        + ReturnOrder getReturnOrderByID(String ID)
        + void saveReturnOrder(ReturnOrder returnOrder)
        + void deleteReturnOrder(String ID)

        + List<TestDescriptor> getAllTestDescriptors()
        + TestDescriptor getTestDescriptorByID(String ID)
        + void saveTestDescriptor(TestDescriptor testDescriptor)
        + void deleteTestDescriptor(String ID)

        + List<Item> getAllItems()
        + Item getItemByID(String ID)
        + void saveItem(Item item)
        + void deleteItem(String ID)

        + List<SKUItem> getAllSKUItem()
        + SKUItem getSKUItemByID(String ID)
        + void saveSKUItem(SKUItem SKUitem)
        + void deleteSKUItem(String ID)

        + List<TestResult> getAllTestResults()
        + TestResult getTestResultByID(String ID)
        + void saveTestResult(TestResult testResult)
        + void deleteTestResult(String ID)
    }

    ' Database connections
    DBHandler <-up- ItemManager
    DBHandler <-up- SKUItemManager
    DBHandler <-up- WarehouseManager
    DBHandler <-up- ReturnOrderManager
    DBHandler <-up- RestockOrderManager
    DBHandler <-up- InternalOrderManager
    DBHandler <-up- UserManager

    ' FacadeController connections
    FacadeController --> SKUManager
    FacadeController --> RestockOrderManager
    FacadeController --> InternalOrderManager
    FacadeController --> ReturnOrderManager
    FacadeController --> WarehouseManager
    FacadeController --> ItemManager
    FacadeController --> SKUItemManager
    FacadeController --> UserManager

    ' Managers' -- Managers' connections
    SKUItemManager <-left- RestockOrderManager
    SKUManager <-right- RestockOrderManager
    SKUItemManager <-left- ReturnOrderManager
    SKUManager <-right- ReturnOrderManager
    SKUManager <-right- InternalOrderManager
}
    
@enduml